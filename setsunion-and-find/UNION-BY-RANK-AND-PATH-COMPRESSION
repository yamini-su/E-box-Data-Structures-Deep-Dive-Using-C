#include <stdio.h>
#include <stdlib.h>
 
// a structure to represent an edge in graph
struct Edge
{
    int src, dest;
};
 
// a structure to represent a graph
struct Graph
{
    // V-> Number of vertices, E-> Number of edges
    int V, E;
 
    // graph is represented as an array of edges
    struct Edge* edge;
};
 
struct subset
{
    int parent;
    int rank;
};
 
// Creates a graph with V vertices and E edges
struct Graph* createGraph(int V, int E)
{
    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) );
    graph->V = V;
    graph->E = E;
 
    graph->edge = (struct Edge*) malloc( graph->E * sizeof( struct Edge ) );
 
    return graph;
}
 
// A utility function to find set of an element i
// (uses path compression technique)
int find(struct subset subsets[], int i)
{
    if (subsets[i].parent != i) 
        subsets[i].parent = find(subsets, subsets[i].parent); 
  
    return subsets[i].parent; 
}
 
// A function that does union of two sets of x and y
// (uses union by rank)
void Union(struct subset subsets[], int x, int y)
{
    int xroot = find(subsets, x); 
    int yroot = find(subsets, y); 
  
    // Attach smaller rank tree under root of high rank tree 
    // (Union by Rank) 
    if (subsets[xroot].rank < subsets[yroot].rank) 
        subsets[xroot].parent = yroot; 
    else if (subsets[xroot].rank > subsets[yroot].rank) 
        subsets[yroot].parent = xroot; 
  
    // If ranks are same, then make one as root and increment 
    // its rank by one 
    else
    { 
        subsets[yroot].parent = xroot; 
        subsets[xroot].rank++; 
    } 
}
 
// The main function to check whether a given graph contains cycle or not
int isCycle( struct Graph* graph )
{
    int V = graph->V; 
    int E = graph->E; 
  
    // Allocate memory for creating V sets 
    struct subset *subsets = 
        (struct subset*) malloc( V * sizeof(struct subset) ); 
  
    for (int v = 0; v < V; ++v) 
    { 
        subsets[v].parent = v; 
        subsets[v].rank = 0; 
    } 
  
    // Iterate through all edges of graph, find sets of both 
    // vertices of every edge, if sets are same, then there is 
    // cycle in graph. 
    for(int e = 0; e < E; ++e) 
    { 
        int x = find(subsets, graph->edge[e].src); 
        int y = find(subsets, graph->edge[e].dest); 
  
        if (x == y) 
            return 1; 
  
        Union(subsets, x, y); 
    } 
    return 0; 
}
 
// Driver program to test above functions
int main()
{
 
    int V = 3, E = 3,i;
    struct Graph* graph = NULL;
	printf("Enter the number of egdes and vertices\n");
	scanf("%d%d",&E,&V);
 
	graph = createGraph(V, E);
	for(i=0;i<E;i++){
		printf("Enter the source and destination of edge %d\n",i);
		scanf("%d%d",&(graph->edge[i].src),&(graph->edge[i].dest));
	}

    if (isCycle(graph))
        printf( "Graph contains cycle\n" );
    else
        printf( "Graph doesn't contain cycle\n" );
 
    return 0;
}
